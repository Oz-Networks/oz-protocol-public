/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CollectorRegistry {
  export type FactoryInfoStruct = {
    factoryAddress: AddressLike;
    timestamp: BigNumberish;
    version: string;
    active: boolean;
  };

  export type FactoryInfoStructOutput = [
    factoryAddress: string,
    timestamp: bigint,
    version: string,
    active: boolean
  ] & {
    factoryAddress: string;
    timestamp: bigint;
    version: string;
    active: boolean;
  };
}

export interface CollectorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "currentFactory"
      | "factoryHistory"
      | "getFactoryHistory"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FactoryUpdated" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "currentFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFactory",
    values: [AddressLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFactory",
    data: BytesLike
  ): Result;
}

export namespace FactoryUpdatedEvent {
  export type InputTuple = [
    oldFactory: AddressLike,
    newFactory: AddressLike,
    version: string
  ];
  export type OutputTuple = [
    oldFactory: string,
    newFactory: string,
    version: string
  ];
  export interface OutputObject {
    oldFactory: string;
    newFactory: string;
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CollectorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): CollectorRegistry;
  waitForDeployment(): Promise<this>;

  interface: CollectorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  currentFactory: TypedContractMethod<[], [string], "view">;

  factoryHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        factoryAddress: string;
        timestamp: bigint;
        version: string;
        active: boolean;
      }
    ],
    "view"
  >;

  getFactoryHistory: TypedContractMethod<
    [],
    [CollectorRegistry.FactoryInfoStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFactory: TypedContractMethod<
    [newFactory: AddressLike, version: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "currentFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factoryHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        factoryAddress: string;
        timestamp: bigint;
        version: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFactoryHistory"
  ): TypedContractMethod<
    [],
    [CollectorRegistry.FactoryInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFactory"
  ): TypedContractMethod<
    [newFactory: AddressLike, version: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FactoryUpdated"
  ): TypedContractEvent<
    FactoryUpdatedEvent.InputTuple,
    FactoryUpdatedEvent.OutputTuple,
    FactoryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "FactoryUpdated(address,address,string)": TypedContractEvent<
      FactoryUpdatedEvent.InputTuple,
      FactoryUpdatedEvent.OutputTuple,
      FactoryUpdatedEvent.OutputObject
    >;
    FactoryUpdated: TypedContractEvent<
      FactoryUpdatedEvent.InputTuple,
      FactoryUpdatedEvent.OutputTuple,
      FactoryUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}

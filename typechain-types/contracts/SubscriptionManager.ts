/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SubscriptionManager {
  export type SubscriberStruct = { subscriber: AddressLike; recipient: string };

  export type SubscriberStructOutput = [
    subscriber: string,
    recipient: string
  ] & { subscriber: string; recipient: string };
}

export interface SubscriptionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_RECORD"
      | "MIN_SUBSCRIPTION_PERIOD"
      | "cancelSubscription"
      | "collectorFee"
      | "dataProviderQualities"
      | "endSubscription"
      | "feePerDay"
      | "getSubscribers"
      | "nft"
      | "owner"
      | "renewSubscription"
      | "renounceOwnership"
      | "setCollectorFee"
      | "setFeePerDay"
      | "subscribe"
      | "subscribers"
      | "subscriptions"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectorFeeUpdated"
      | "FeePerDayUpdated"
      | "OwnershipTransferred"
      | "QualityProvided"
      | "SubscriptionCancelled"
      | "SubscriptionCreated"
      | "SubscriptionEnded"
      | "SubscriptionRenewed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_RECORD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SUBSCRIPTION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectorFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataProviderQualities",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endSubscription",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feePerDay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSubscribers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renewSubscription",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePerDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_RECORD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SUBSCRIPTION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataProviderQualities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePerDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CollectorFeeUpdatedEvent {
  export type InputTuple = [newCollectorFee: BigNumberish];
  export type OutputTuple = [newCollectorFee: bigint];
  export interface OutputObject {
    newCollectorFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeePerDayUpdatedEvent {
  export type InputTuple = [newFeePerDay: BigNumberish];
  export type OutputTuple = [newFeePerDay: bigint];
  export interface OutputObject {
    newFeePerDay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QualityProvidedEvent {
  export type InputTuple = [
    dataProvider: AddressLike,
    subscriber: AddressLike,
    quality: BigNumberish
  ];
  export type OutputTuple = [
    dataProvider: string,
    subscriber: string,
    quality: bigint
  ];
  export interface OutputObject {
    dataProvider: string;
    subscriber: string;
    quality: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCancelledEvent {
  export type InputTuple = [dataProvider: AddressLike, subscriber: AddressLike];
  export type OutputTuple = [dataProvider: string, subscriber: string];
  export interface OutputObject {
    dataProvider: string;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [
    dataProvider: AddressLike,
    subscriber: AddressLike,
    recipient: string,
    endTime: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    dataProvider: string,
    subscriber: string,
    recipient: string,
    endTime: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    dataProvider: string;
    subscriber: string;
    recipient: string;
    endTime: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionEndedEvent {
  export type InputTuple = [dataProvider: AddressLike, subscriber: AddressLike];
  export type OutputTuple = [dataProvider: string, subscriber: string];
  export interface OutputObject {
    dataProvider: string;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionRenewedEvent {
  export type InputTuple = [
    dataProvider: AddressLike,
    subscriber: AddressLike,
    newRecipient: string,
    newEndTime: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    dataProvider: string,
    subscriber: string,
    newRecipient: string,
    newEndTime: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    dataProvider: string;
    subscriber: string;
    newRecipient: string;
    newEndTime: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionManager extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionManager;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_RECORD: TypedContractMethod<[], [bigint], "view">;

  MIN_SUBSCRIPTION_PERIOD: TypedContractMethod<[], [bigint], "view">;

  cancelSubscription: TypedContractMethod<
    [dataProvider: AddressLike, quality: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectorFee: TypedContractMethod<[], [bigint], "view">;

  dataProviderQualities: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  endSubscription: TypedContractMethod<
    [dataProvider: AddressLike, quality: BigNumberish],
    [void],
    "nonpayable"
  >;

  feePerDay: TypedContractMethod<[], [bigint], "view">;

  getSubscribers: TypedContractMethod<
    [_dataProvider: AddressLike],
    [SubscriptionManager.SubscriberStructOutput[]],
    "view"
  >;

  nft: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renewSubscription: TypedContractMethod<
    [
      dataProvider: AddressLike,
      newRecipient: string,
      newEndTime: BigNumberish,
      quality: BigNumberish
    ],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCollectorFee: TypedContractMethod<
    [collectorFee_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeePerDay: TypedContractMethod<
    [feePerDay_: BigNumberish],
    [void],
    "nonpayable"
  >;

  subscribe: TypedContractMethod<
    [dataProvider: AddressLike, recipient: string, endTime: BigNumberish],
    [void],
    "payable"
  >;

  subscribers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, string] & { subscriber: string; recipient: string }],
    "view"
  >;

  subscriptions: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, string] & { endTime: bigint; recipient: string }],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_RECORD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SUBSCRIPTION_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<
    [dataProvider: AddressLike, quality: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectorFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dataProviderQualities"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "endSubscription"
  ): TypedContractMethod<
    [dataProvider: AddressLike, quality: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feePerDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSubscribers"
  ): TypedContractMethod<
    [_dataProvider: AddressLike],
    [SubscriptionManager.SubscriberStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "nft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renewSubscription"
  ): TypedContractMethod<
    [
      dataProvider: AddressLike,
      newRecipient: string,
      newEndTime: BigNumberish,
      quality: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectorFee"
  ): TypedContractMethod<[collectorFee_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeePerDay"
  ): TypedContractMethod<[feePerDay_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<
    [dataProvider: AddressLike, recipient: string, endTime: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "subscribers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, string] & { subscriber: string; recipient: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, string] & { endTime: bigint; recipient: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CollectorFeeUpdated"
  ): TypedContractEvent<
    CollectorFeeUpdatedEvent.InputTuple,
    CollectorFeeUpdatedEvent.OutputTuple,
    CollectorFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeePerDayUpdated"
  ): TypedContractEvent<
    FeePerDayUpdatedEvent.InputTuple,
    FeePerDayUpdatedEvent.OutputTuple,
    FeePerDayUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "QualityProvided"
  ): TypedContractEvent<
    QualityProvidedEvent.InputTuple,
    QualityProvidedEvent.OutputTuple,
    QualityProvidedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCancelled"
  ): TypedContractEvent<
    SubscriptionCancelledEvent.InputTuple,
    SubscriptionCancelledEvent.OutputTuple,
    SubscriptionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionEnded"
  ): TypedContractEvent<
    SubscriptionEndedEvent.InputTuple,
    SubscriptionEndedEvent.OutputTuple,
    SubscriptionEndedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionRenewed"
  ): TypedContractEvent<
    SubscriptionRenewedEvent.InputTuple,
    SubscriptionRenewedEvent.OutputTuple,
    SubscriptionRenewedEvent.OutputObject
  >;

  filters: {
    "CollectorFeeUpdated(uint256)": TypedContractEvent<
      CollectorFeeUpdatedEvent.InputTuple,
      CollectorFeeUpdatedEvent.OutputTuple,
      CollectorFeeUpdatedEvent.OutputObject
    >;
    CollectorFeeUpdated: TypedContractEvent<
      CollectorFeeUpdatedEvent.InputTuple,
      CollectorFeeUpdatedEvent.OutputTuple,
      CollectorFeeUpdatedEvent.OutputObject
    >;

    "FeePerDayUpdated(uint256)": TypedContractEvent<
      FeePerDayUpdatedEvent.InputTuple,
      FeePerDayUpdatedEvent.OutputTuple,
      FeePerDayUpdatedEvent.OutputObject
    >;
    FeePerDayUpdated: TypedContractEvent<
      FeePerDayUpdatedEvent.InputTuple,
      FeePerDayUpdatedEvent.OutputTuple,
      FeePerDayUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "QualityProvided(address,address,uint8)": TypedContractEvent<
      QualityProvidedEvent.InputTuple,
      QualityProvidedEvent.OutputTuple,
      QualityProvidedEvent.OutputObject
    >;
    QualityProvided: TypedContractEvent<
      QualityProvidedEvent.InputTuple,
      QualityProvidedEvent.OutputTuple,
      QualityProvidedEvent.OutputObject
    >;

    "SubscriptionCancelled(address,address)": TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
    SubscriptionCancelled: TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;

    "SubscriptionCreated(address,address,string,uint256,uint256)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionEnded(address,address)": TypedContractEvent<
      SubscriptionEndedEvent.InputTuple,
      SubscriptionEndedEvent.OutputTuple,
      SubscriptionEndedEvent.OutputObject
    >;
    SubscriptionEnded: TypedContractEvent<
      SubscriptionEndedEvent.InputTuple,
      SubscriptionEndedEvent.OutputTuple,
      SubscriptionEndedEvent.OutputObject
    >;

    "SubscriptionRenewed(address,address,string,uint256,uint256)": TypedContractEvent<
      SubscriptionRenewedEvent.InputTuple,
      SubscriptionRenewedEvent.OutputTuple,
      SubscriptionRenewedEvent.OutputObject
    >;
    SubscriptionRenewed: TypedContractEvent<
      SubscriptionRenewedEvent.InputTuple,
      SubscriptionRenewedEvent.OutputTuple,
      SubscriptionRenewedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CollectorFactory {
  export type CollectorInfoStruct = {
    collectorAddress: AddressLike;
    collectorOwner: AddressLike;
    timestamp: BigNumberish;
    validity: boolean;
  };

  export type CollectorInfoStructOutput = [
    collectorAddress: string,
    collectorOwner: string,
    timestamp: bigint,
    validity: boolean
  ] & {
    collectorAddress: string;
    collectorOwner: string;
    timestamp: bigint;
    validity: boolean;
  };
}

export interface CollectorFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collectorList"
      | "collectors"
      | "createCollector"
      | "creatorList"
      | "getReputationScore"
      | "handleCollectorCreator"
      | "handleCollectorValidity"
      | "handleReputationProvider"
      | "listCollectorsByValidation"
      | "owner"
      | "renounceOwnership"
      | "reputationProviders"
      | "reputationRequest"
      | "reputationScores"
      | "requestReputation"
      | "storeReputationScore"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectorCreated"
      | "CollectorCreatorChanged"
      | "CollectorValidityChanged"
      | "OwnershipTransferred"
      | "ReputationProviderChanged"
      | "ReputationRequestCreated"
      | "ReputationScoreProvided"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "collectorList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollector",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationScore",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleCollectorCreator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "handleCollectorValidity",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "handleReputationProvider",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "listCollectorsByValidation",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationProviders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reputationRequest",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reputationScores",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReputation",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storeReputationScore",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleCollectorCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleCollectorValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleReputationProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCollectorsByValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CollectorCreatedEvent {
  export type InputTuple = [
    collector: AddressLike,
    collectorOwner: AddressLike
  ];
  export type OutputTuple = [collector: string, collectorOwner: string];
  export interface OutputObject {
    collector: string;
    collectorOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectorCreatorChangedEvent {
  export type InputTuple = [collector: AddressLike, active: boolean];
  export type OutputTuple = [collector: string, active: boolean];
  export interface OutputObject {
    collector: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectorValidityChangedEvent {
  export type InputTuple = [collector: AddressLike, validity: boolean];
  export type OutputTuple = [collector: string, validity: boolean];
  export interface OutputObject {
    collector: string;
    validity: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationProviderChangedEvent {
  export type InputTuple = [reputationProvider: AddressLike, active: boolean];
  export type OutputTuple = [reputationProvider: string, active: boolean];
  export interface OutputObject {
    reputationProvider: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationRequestCreatedEvent {
  export type InputTuple = [
    collector: AddressLike,
    dataProvider: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    collector: string,
    dataProvider: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    collector: string;
    dataProvider: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationScoreProvidedEvent {
  export type InputTuple = [
    collector: AddressLike,
    dataProvider: AddressLike,
    score: BigNumberish
  ];
  export type OutputTuple = [
    collector: string,
    dataProvider: string,
    score: bigint
  ];
  export interface OutputObject {
    collector: string;
    dataProvider: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CollectorFactory extends BaseContract {
  connect(runner?: ContractRunner | null): CollectorFactory;
  waitForDeployment(): Promise<this>;

  interface: CollectorFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collectorList: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean] & {
        collectorAddress: string;
        collectorOwner: string;
        timestamp: bigint;
        validity: boolean;
      }
    ],
    "view"
  >;

  collectors: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createCollector: TypedContractMethod<
    [nft_: AddressLike, feePerDay_: BigNumberish, collectorFee_: BigNumberish],
    [string],
    "nonpayable"
  >;

  creatorList: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getReputationScore: TypedContractMethod<
    [collector: AddressLike, dataProvider: AddressLike],
    [bigint],
    "view"
  >;

  handleCollectorCreator: TypedContractMethod<
    [collector: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  handleCollectorValidity: TypedContractMethod<
    [collector: AddressLike, validity: boolean],
    [void],
    "nonpayable"
  >;

  handleReputationProvider: TypedContractMethod<
    [reputationProvider: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  listCollectorsByValidation: TypedContractMethod<
    [validation: boolean],
    [CollectorFactory.CollectorInfoStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationProviders: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  reputationRequest: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  reputationScores: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  requestReputation: TypedContractMethod<
    [collector: AddressLike, dataProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  storeReputationScore: TypedContractMethod<
    [collector: AddressLike, dataProvider: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collectorList"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean] & {
        collectorAddress: string;
        collectorOwner: string;
        timestamp: bigint;
        validity: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "collectors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createCollector"
  ): TypedContractMethod<
    [nft_: AddressLike, feePerDay_: BigNumberish, collectorFee_: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorList"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getReputationScore"
  ): TypedContractMethod<
    [collector: AddressLike, dataProvider: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleCollectorCreator"
  ): TypedContractMethod<
    [collector: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleCollectorValidity"
  ): TypedContractMethod<
    [collector: AddressLike, validity: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleReputationProvider"
  ): TypedContractMethod<
    [reputationProvider: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listCollectorsByValidation"
  ): TypedContractMethod<
    [validation: boolean],
    [CollectorFactory.CollectorInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationProviders"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "reputationRequest"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "reputationScores"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestReputation"
  ): TypedContractMethod<
    [collector: AddressLike, dataProvider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storeReputationScore"
  ): TypedContractMethod<
    [collector: AddressLike, dataProvider: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CollectorCreated"
  ): TypedContractEvent<
    CollectorCreatedEvent.InputTuple,
    CollectorCreatedEvent.OutputTuple,
    CollectorCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CollectorCreatorChanged"
  ): TypedContractEvent<
    CollectorCreatorChangedEvent.InputTuple,
    CollectorCreatorChangedEvent.OutputTuple,
    CollectorCreatorChangedEvent.OutputObject
  >;
  getEvent(
    key: "CollectorValidityChanged"
  ): TypedContractEvent<
    CollectorValidityChangedEvent.InputTuple,
    CollectorValidityChangedEvent.OutputTuple,
    CollectorValidityChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReputationProviderChanged"
  ): TypedContractEvent<
    ReputationProviderChangedEvent.InputTuple,
    ReputationProviderChangedEvent.OutputTuple,
    ReputationProviderChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationRequestCreated"
  ): TypedContractEvent<
    ReputationRequestCreatedEvent.InputTuple,
    ReputationRequestCreatedEvent.OutputTuple,
    ReputationRequestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationScoreProvided"
  ): TypedContractEvent<
    ReputationScoreProvidedEvent.InputTuple,
    ReputationScoreProvidedEvent.OutputTuple,
    ReputationScoreProvidedEvent.OutputObject
  >;

  filters: {
    "CollectorCreated(address,address)": TypedContractEvent<
      CollectorCreatedEvent.InputTuple,
      CollectorCreatedEvent.OutputTuple,
      CollectorCreatedEvent.OutputObject
    >;
    CollectorCreated: TypedContractEvent<
      CollectorCreatedEvent.InputTuple,
      CollectorCreatedEvent.OutputTuple,
      CollectorCreatedEvent.OutputObject
    >;

    "CollectorCreatorChanged(address,bool)": TypedContractEvent<
      CollectorCreatorChangedEvent.InputTuple,
      CollectorCreatorChangedEvent.OutputTuple,
      CollectorCreatorChangedEvent.OutputObject
    >;
    CollectorCreatorChanged: TypedContractEvent<
      CollectorCreatorChangedEvent.InputTuple,
      CollectorCreatorChangedEvent.OutputTuple,
      CollectorCreatorChangedEvent.OutputObject
    >;

    "CollectorValidityChanged(address,bool)": TypedContractEvent<
      CollectorValidityChangedEvent.InputTuple,
      CollectorValidityChangedEvent.OutputTuple,
      CollectorValidityChangedEvent.OutputObject
    >;
    CollectorValidityChanged: TypedContractEvent<
      CollectorValidityChangedEvent.InputTuple,
      CollectorValidityChangedEvent.OutputTuple,
      CollectorValidityChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReputationProviderChanged(address,bool)": TypedContractEvent<
      ReputationProviderChangedEvent.InputTuple,
      ReputationProviderChangedEvent.OutputTuple,
      ReputationProviderChangedEvent.OutputObject
    >;
    ReputationProviderChanged: TypedContractEvent<
      ReputationProviderChangedEvent.InputTuple,
      ReputationProviderChangedEvent.OutputTuple,
      ReputationProviderChangedEvent.OutputObject
    >;

    "ReputationRequestCreated(address,address,uint256)": TypedContractEvent<
      ReputationRequestCreatedEvent.InputTuple,
      ReputationRequestCreatedEvent.OutputTuple,
      ReputationRequestCreatedEvent.OutputObject
    >;
    ReputationRequestCreated: TypedContractEvent<
      ReputationRequestCreatedEvent.InputTuple,
      ReputationRequestCreatedEvent.OutputTuple,
      ReputationRequestCreatedEvent.OutputObject
    >;

    "ReputationScoreProvided(address,address,uint256)": TypedContractEvent<
      ReputationScoreProvidedEvent.InputTuple,
      ReputationScoreProvidedEvent.OutputTuple,
      ReputationScoreProvidedEvent.OutputObject
    >;
    ReputationScoreProvided: TypedContractEvent<
      ReputationScoreProvidedEvent.InputTuple,
      ReputationScoreProvidedEvent.OutputTuple,
      ReputationScoreProvidedEvent.OutputObject
    >;
  };
}
